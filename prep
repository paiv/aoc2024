#!/usr/bin/env python
import signal
import sys
import time
import tomllib
import urllib.request
from datetime import datetime, timedelta, timezone
from pathlib import Path


def trace(*args, **kwargs):
    print(*args, file=sys.stderr, flush=True, **kwargs)


def prep(day=None, year=None):
    now = datetime.now(timezone.utc)

    if year is None:
        year = now.year

    if day is None:
        dec1 = datetime(year, 12, 1, tzinfo=timezone.utc)
        day = (now - dec1).days + 1
        if day <= 0: day = 1
    else:
        day = int(day)

    mydir = Path(__file__).resolve().parent
    dayin = mydir / 'days' / f'day{day}.in'
    dayurl = f'https://adventofcode.com/{year}/day/{day}/input'

    headers = None
    if Path('.env').is_file():
        with open('.env', 'rb') as fp:
            config = tomllib.load(fp)
            headers = config['wget']['headers']

    if dayin.is_file():
        yn = input(f'{dayin}\nFile already exists. Overwrite? [N/y] ')
        overwrite = yn.strip().lower() in ('y', 'yes')
        if not overwrite:
            return

    that_moment = datetime(year, 12, day, 5, tzinfo=timezone.utc)
    sleep_until(that_moment)

    problem = wget(dayurl, headers=headers)

    dayin.parent.mkdir(parents=True, exist_ok=True)
    with open(dayin, 'wb') as fp:
        fp.write(problem)


def sleep_until(that_moment):
    def restore_cursor(*args):
        exit()
    sig = signal.signal(signal.SIGINT, restore_cursor)

    subsec = 2
    while (dt := that_moment - datetime.now(timezone.utc)) > timedelta():
        dt = timedelta(seconds=round(dt.total_seconds()))
        trace(f'T-{dt} ' , end='')
        time.sleep(1/subsec)
        trace('\x1b[1K\x1b[G', end='')

    signal.signal(signal.SIGINT, sig)


def wget(url, headers=None):
    trace(url)
    delay = 1
    while True:
        try:
            req = urllib.request.Request(url, headers=headers or dict())
            with urllib.request.urlopen(req, timeout=5) as r:
                trace(r.url, r.status, r.reason)
                return r.read()
        except Exception as e:
            trace(e)
            time.sleep(delay)
            delay *= 1.44


if __name__ == '__main__':
    import argparse

    cli = argparse.ArgumentParser(description='Download a daily challenge')
    cli.add_argument('day', type=int, nargs='?', help='Day number')
    cli.add_argument('--year', type=int, default=None, help='Year')

    args = cli.parse_args()

    prep(year=args.year, day=args.day)
